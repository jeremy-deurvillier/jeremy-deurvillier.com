---

/* ** Usage (for tag="button"):
* The "bind" property takes the name of a function and executes it when the button is clicked.
* The function must be added to the window.actions object to be recognized by the Button component.
*/

interface CommonProps {
    text: string;
	style?: 'primary' | 'secondary';
}

interface Link extends CommonProps {
    tag: 'link';
    target: string;
}

interface Button extends CommonProps {
    tag: 'button';
    bind: string;
}

interface FormButton extends CommonProps {
    tag: 'submit' | 'reset';
}

type Props = Link | Button | FormButton;

const { text, tag, style = 'primary' } = Astro.props as Props;

let target: string|undefined;
let bind: string|undefined;

if (tag === 'link') target = (Astro.props as Link).target;
if (tag === 'button') bind = (Astro.props as Button).bind;

const primaryStyle: string = 'font-zilla tracking-wide inline-flex justify-center items-center py-4 px-6 text-xl font-medium text-center text-white bg-blue bg-linear-to-r from-blue to-violet shadow-around transition transition-shadow duration-200 duration-1000 focus:ring-4 focus:ring-blue dark:focus:ring-violet cursor-pointer primary';
const secondaryStyle: string = 'font-zilla tracking-wide inline-flex justify-center items-center py-4 px-6 sm:ms-4 text-xl font-medium text-neutral-800 hover:text-neutral-950 shadow-around focus:outline-none bg-ghost border-2 border-violet/60 hover:text-neutral-950 transition duration-200 focus:z-10 focus:ring-4 focus:ring-blue dark:focus:ring-violet dark:text-neutral-400 dark:hover:text-neutral-300 dark:bg-transparent cursor-pointer secondary';

let className = (style === 'primary') ? primaryStyle : secondaryStyle;

---

{
    (tag === 'link')
    ?
    (<a href={ target } class={ className }>
        { text }

        <slot />
    </a>)
    :
    (tag === 'submit' || tag === 'reset')
    ?
    (<button type={ tag } class={ className }>
        { text }

        <slot />
    </button>)
    :
    (<jd-button>
        <button type={ tag } class={ className } data-action={ bind }>
            { text }

            <slot />
        </button>
    </jd-button>)
}

<style>
.primary {
    border-radius: 1.5rem 2.5rem / 2.5rem 1.5rem;
}

.secondary {
    border-radius: 2.5rem 1.5rem / 1.5rem 2.5rem;
}

.primary:hover {
    animation: primaryMove 3s ease infinite;
}

.secondary:hover {
    animation: secondaryMove 3s ease infinite;
}

@keyframes primaryMove {
    0% { border-radius: 1.5rem 2.5rem / 2.5rem 1.5rem; }
    25% { border-radius: 2.5rem 1.5rem / 1.5rem 2.5rem; }
    50% { border-radius: 1.5rem 2.5rem / 2.5rem 1.5rem; }
    75% { border-radius: 2.5rem 1.5rem / 1.5rem 2.5rem; }
    100% { border-radius: 1.5rem 2.5rem / 2.5rem 1.5rem; }
}

@keyframes secondaryMove {
    0% { border-radius: 2.5rem 1.5rem / 1.5rem 2.5rem; }
    25% { border-radius: 1.5rem 2.5rem / 2.5rem 1.5rem; }
    50% { border-radius: 2.5rem 1.5rem / 1.5rem 2.5rem; }
    75% { border-radius: 1.5rem 2.5rem / 2.5rem 1.5rem; }
    100% { border-radius: 2.5rem 1.5rem / 1.5rem 2.5rem; }
}
</style>

<script>
declare global {
    interface Window {
        actions: { [key: string]: () => void };
    }
}

window.actions = window.actions || {};

class JDButton extends HTMLElement {
    connectedCallback() {
        const button: HTMLButtonElement|null = this.querySelector('button');
        const action: string|undefined = button?.dataset.action;

        button?.addEventListener('click', () => {
            if (typeof action === 'string' && window.actions[action]) window.actions[action]();
        });
    }
}

customElements.define('jd-button', JDButton);
</script>